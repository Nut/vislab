# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  category-service:
    # Configuration for building the docker image for the backend service
    build:
      context: category-service # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "1234:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - category-db # This service depends on mysql. Start that first.  
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

  product-service:
    build:
      context: product-service
      dockerfile: Dockerfile
    ports:
      - "1235:8080"
    restart: always
    depends_on: 
      - product-db  
    networks:
      - backend

  user-service:
    build:
      context: user-service
      dockerfile: Dockerfile
    ports:
      - "1236:8080"
    restart: always
    depends_on: 
      - user-db   
    networks:
      - backend

  inventory-service:
    build:
      context: inventory-service
      dockerfile: Dockerfile
    ports:
      - "1237:8080"
    restart: always
    networks:
      - backend
    depends_on:
      - category-service
      - product-service

  webshop-api:
    build:
      context: webshop-api
      dockerfile: Dockerfile
    ports:
      - "1238:8080"
    networks:
      - backend
      - client-network
    depends_on:
      - inventory-service
      - user-service

  # Database Service (Mysql)
  category-db:
    image: mysql:5.7
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: categories
      MYSQL_USER: catUser
      MYSQL_PASSWORD: supersecret
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data-categories:/var/lib/mysql
    networks:
      - backend  

  product-db:
    image: mysql:5.7
    ports:
      - "3307:3306"
    restart: always
    environment:
      MYSQL_DATABASE: products
      MYSQL_USER: prodUser
      MYSQL_PASSWORD: supersecret
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data-products:/var/lib/mysql
    networks:
      - backend

  user-db:
    image: mysql:5.7
    ports:
      - "3308:3306"
    restart: always
    environment:
      MYSQL_DATABASE: users
      MYSQL_USER: usersUser
      MYSQL_PASSWORD: supersecret
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data-users:/var/lib/mysql
      - ./user-service/sql:/docker-entrypoint-initdb.d/:ro
    networks:
      - backend

  webclient:
    build:
      context: ./webshop-client
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8888:8080"
    networks:
      - client-network
    depends_on:
      - web-shop-db-image
  
  web-shop-db-image:
    build:
      context: ./webshop-client
      dockerfile: docker/DockerfileMySQL
    volumes:
      - "./.data/db:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: c8de110f37300a53a971749
      MYSQL_DATABASE: webshop
      MYSQL_USER: webshopuser
      MYSQL_PASSWORD: 240b2c6d58ff2ce2f508b49f
    ports:
      - "3333:3306"
    networks:
      - client-network

  # Discovery Service
  discovery-service:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    ports:
      - "9900:8089"
    networks:
      - backend

# Volumes
volumes:
  db-data-categories:
  db-data-products:
  db-data-users:

# Networks to be created to facilitate communication between containers
networks:
  backend:
    driver: bridge
  client-network:
    driver: bridge